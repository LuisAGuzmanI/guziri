// Generated from PatitoLexer.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,33,215,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,1,0,1,0,1,0,1,
0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,
6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,
9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,4,11,136,8,11,11,11,12,11,
137,1,12,4,12,141,8,12,11,12,12,12,142,1,12,1,12,4,12,147,8,12,11,12,12,
12,148,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,5,14,161,8,14,10,
14,12,14,164,9,14,1,15,1,15,5,15,168,8,15,10,15,12,15,171,9,15,1,15,1,15,
1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,
1,29,1,30,1,30,1,31,1,31,1,32,4,32,210,8,32,11,32,12,32,211,1,32,1,32,1,
169,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,1,0,4,1,0,48,57,3,0,65,90,
95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,220,0,1,1,
0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,
0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,76,
1,0,0,0,5,81,1,0,0,0,7,88,1,0,0,0,9,97,1,0,0,0,11,102,1,0,0,0,13,105,1,0,
0,0,15,110,1,0,0,0,17,119,1,0,0,0,19,123,1,0,0,0,21,130,1,0,0,0,23,135,1,
0,0,0,25,140,1,0,0,0,27,150,1,0,0,0,29,158,1,0,0,0,31,165,1,0,0,0,33,174,
1,0,0,0,35,176,1,0,0,0,37,178,1,0,0,0,39,180,1,0,0,0,41,182,1,0,0,0,43,184,
1,0,0,0,45,186,1,0,0,0,47,188,1,0,0,0,49,190,1,0,0,0,51,192,1,0,0,0,53,194,
1,0,0,0,55,197,1,0,0,0,57,200,1,0,0,0,59,202,1,0,0,0,61,204,1,0,0,0,63,206,
1,0,0,0,65,209,1,0,0,0,67,68,5,112,0,0,68,69,5,114,0,0,69,70,5,111,0,0,70,
71,5,103,0,0,71,72,5,114,0,0,72,73,5,97,0,0,73,74,5,109,0,0,74,75,5,97,0,
0,75,2,1,0,0,0,76,77,5,118,0,0,77,78,5,97,0,0,78,79,5,114,0,0,79,80,5,115,
0,0,80,4,1,0,0,0,81,82,5,101,0,0,82,83,5,110,0,0,83,84,5,116,0,0,84,85,5,
101,0,0,85,86,5,114,0,0,86,87,5,111,0,0,87,6,1,0,0,0,88,89,5,102,0,0,89,
90,5,108,0,0,90,91,5,111,0,0,91,92,5,116,0,0,92,93,5,97,0,0,93,94,5,110,
0,0,94,95,5,116,0,0,95,96,5,101,0,0,96,8,1,0,0,0,97,98,5,110,0,0,98,99,5,
117,0,0,99,100,5,108,0,0,100,101,5,97,0,0,101,10,1,0,0,0,102,103,5,115,0,
0,103,104,5,105,0,0,104,12,1,0,0,0,105,106,5,115,0,0,106,107,5,105,0,0,107,
108,5,110,0,0,108,109,5,111,0,0,109,14,1,0,0,0,110,111,5,109,0,0,111,112,
5,105,0,0,112,113,5,101,0,0,113,114,5,110,0,0,114,115,5,116,0,0,115,116,
5,114,0,0,116,117,5,97,0,0,117,118,5,115,0,0,118,16,1,0,0,0,119,120,5,104,
0,0,120,121,5,97,0,0,121,122,5,122,0,0,122,18,1,0,0,0,123,124,5,105,0,0,
124,125,5,110,0,0,125,126,5,105,0,0,126,127,5,99,0,0,127,128,5,105,0,0,128,
129,5,111,0,0,129,20,1,0,0,0,130,131,5,102,0,0,131,132,5,105,0,0,132,133,
5,110,0,0,133,22,1,0,0,0,134,136,7,0,0,0,135,134,1,0,0,0,136,137,1,0,0,0,
137,135,1,0,0,0,137,138,1,0,0,0,138,24,1,0,0,0,139,141,7,0,0,0,140,139,1,
0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,
146,5,46,0,0,145,147,7,0,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,
0,0,148,149,1,0,0,0,149,26,1,0,0,0,150,151,5,101,0,0,151,152,5,115,0,0,152,
153,5,99,0,0,153,154,5,114,0,0,154,155,5,105,0,0,155,156,5,98,0,0,156,157,
5,101,0,0,157,28,1,0,0,0,158,162,7,1,0,0,159,161,7,2,0,0,160,159,1,0,0,0,
161,164,1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,30,1,0,0,0,164,162,1,
0,0,0,165,169,5,34,0,0,166,168,9,0,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,
170,1,0,0,0,169,167,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,5,34,
0,0,173,32,1,0,0,0,174,175,5,59,0,0,175,34,1,0,0,0,176,177,5,58,0,0,177,
36,1,0,0,0,178,179,5,44,0,0,179,38,1,0,0,0,180,181,5,40,0,0,181,40,1,0,0,
0,182,183,5,41,0,0,183,42,1,0,0,0,184,185,5,123,0,0,185,44,1,0,0,0,186,187,
5,125,0,0,187,46,1,0,0,0,188,189,5,61,0,0,189,48,1,0,0,0,190,191,5,62,0,
0,191,50,1,0,0,0,192,193,5,60,0,0,193,52,1,0,0,0,194,195,5,33,0,0,195,196,
5,61,0,0,196,54,1,0,0,0,197,198,5,61,0,0,198,199,5,61,0,0,199,56,1,0,0,0,
200,201,5,43,0,0,201,58,1,0,0,0,202,203,5,45,0,0,203,60,1,0,0,0,204,205,
5,42,0,0,205,62,1,0,0,0,206,207,5,47,0,0,207,64,1,0,0,0,208,210,7,3,0,0,
209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,213,
1,0,0,0,213,214,6,32,0,0,214,66,1,0,0,0,7,0,137,142,148,162,169,211,1,6,
0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class PatitoLexer extends antlr4.Lexer {

    static grammarFileName = "PatitoLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'programa'", "'vars'", "'entero'", "'flotante'", 
                         "'nula'", "'si'", "'sino'", "'mientras'", "'haz'", 
                         "'inicio'", "'fin'", null, null, "'escribe'", null, 
                         null, "';'", "':'", "','", "'('", "')'", "'{'", 
                         "'}'", "'='", "'>'", "'<'", "'!='", "'=='", "'+'", 
                         "'-'", "'*'", "'/'" ];
	static symbolicNames = [ null, "PROGRAM", "VARS", "ENTERO", "FLOTANTE", 
                          "NULA", "SI", "SINO", "MIENTRAS", "HAZ", "INICIO", 
                          "FIN", "CTE_ENT", "CTE_FLOT", "ESCRIBE", "ID", 
                          "LETRERO", "SEMICOLON", "COLON", "COMMA", "LPAR", 
                          "RPAR", "LBRACE", "RBRACE", "ASSIGN", "GT", "LT", 
                          "NEQ", "EQ", "PLUS", "MINUS", "MULT", "DIV", "WS" ];
	static ruleNames = [ "PROGRAM", "VARS", "ENTERO", "FLOTANTE", "NULA", "SI", 
                      "SINO", "MIENTRAS", "HAZ", "INICIO", "FIN", "CTE_ENT", 
                      "CTE_FLOT", "ESCRIBE", "ID", "LETRERO", "SEMICOLON", 
                      "COLON", "COMMA", "LPAR", "RPAR", "LBRACE", "RBRACE", 
                      "ASSIGN", "GT", "LT", "NEQ", "EQ", "PLUS", "MINUS", 
                      "MULT", "DIV", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

PatitoLexer.EOF = antlr4.Token.EOF;
PatitoLexer.PROGRAM = 1;
PatitoLexer.VARS = 2;
PatitoLexer.ENTERO = 3;
PatitoLexer.FLOTANTE = 4;
PatitoLexer.NULA = 5;
PatitoLexer.SI = 6;
PatitoLexer.SINO = 7;
PatitoLexer.MIENTRAS = 8;
PatitoLexer.HAZ = 9;
PatitoLexer.INICIO = 10;
PatitoLexer.FIN = 11;
PatitoLexer.CTE_ENT = 12;
PatitoLexer.CTE_FLOT = 13;
PatitoLexer.ESCRIBE = 14;
PatitoLexer.ID = 15;
PatitoLexer.LETRERO = 16;
PatitoLexer.SEMICOLON = 17;
PatitoLexer.COLON = 18;
PatitoLexer.COMMA = 19;
PatitoLexer.LPAR = 20;
PatitoLexer.RPAR = 21;
PatitoLexer.LBRACE = 22;
PatitoLexer.RBRACE = 23;
PatitoLexer.ASSIGN = 24;
PatitoLexer.GT = 25;
PatitoLexer.LT = 26;
PatitoLexer.NEQ = 27;
PatitoLexer.EQ = 28;
PatitoLexer.PLUS = 29;
PatitoLexer.MINUS = 30;
PatitoLexer.MULT = 31;
PatitoLexer.DIV = 32;
PatitoLexer.WS = 33;



